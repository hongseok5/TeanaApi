input {
    jdbc {
            # path of the jdbc driver
            #jdbc_driver_library => "/app/mysql-connector-java-8.0.17.jar"
            jdbc_driver_library => "/app/openQuerySE/logstash-6.5.4/lib_extend/mariadb-java-client-2.3.0.jar"

            # The name of the driver class 
            #jdbc_driver_class => "com.mysql.jdbc.Driver"
            jdbc_driver_class => "org.mariadb.jdbc.Driver"

            # Mysql jdbc connection string to company database
            #jdbc_connection_string => "jdbc:mysql://10.253.42.184:3306/ssgtv?serverTimezone=UTC"
            jdbc_connection_string => "jdbc:mariadb://10.253.42.184:3306/ssgtv?serverTimezone=UTC"
        
            # user credentials to connect to the DB
            jdbc_user => "ssgtv"
            jdbc_password => "ssgtv0930"

            # when to periodically run statement, cron format (ex: every 30 minutes)
            schedule => "*/2 * * * *"
            # use_column_value => true
            # tracking_column => "call_num"
            # query parameters
            # parameters => { "department" => "IT" }

            # sql statement 
            statement => "SELECT 
							a.call_num as call_num   
							,a.start_time  /* 시작시간 */   
							,a.extension  /* 내선번호 */  
							,a.call_id  /* CALL_SIGN_ID */  
							,a.cti_id  /*  CTI_ID  */  
							,a.emp_id  /* 직원ID */  
							,a.emp_nm  /*  직원명  */  
							,REGEXP_REPLACE(a.caller_num, '(^02.{0}|^01.{1}|[0-9]{3})([0-9]+)([0-9]{4})', '\\1-****-\\3')    AS caller_num  /*  발신번호  */  
							,a.receiver_num  /*  수신넘버  */  
							,a.pc_ip  /*  상담원 PC IP*/  
							,REGEXP_REPLACE(a.cust_nm, '(^.{1})(.+)', '\\1**') as cust_nm  /* 고객명 */  
							,a.call_stat_cd  /* CALL 상태코드 */  
							,a.call_start_dtm  /*  CALL 시작일시  */  
							,a.call_end_dtm  /*  CALL 종료일시  */
							,(SELECT bis_id FROM nx_emp where emp_id = a.emp_id ) as company_code /* 회사코드*/
							,(SELECT dept_nm FROM nx_dept WHERE dept_cd = (SELECT bis_id FROM nx_emp where emp_id = a.emp_id )) as company_nm /* 회사명*/
	                                                ,  nvl(user_getNm(a.qa_emp_id), '') as qa_emp_nm
                                                        , cal_TalkTime(a.duration) as talk_time
                                                        , comm_getNm('IN_OUT', a.direction) as direction_nm
                                                        ,date_format(STR_TO_DATE(a.start_time, '%Y%m%d%H%i%s'),'%Y-%m-%d') as call_dt 
                                                        ,date_format(STR_TO_DATE(a.call_start_dtm, '%Y%m%d%H%i%s'),'%H:%i:%s') as call_start_tm 
                                                        ,date_format(STR_TO_DATE(a.call_end_dtm, '%Y%m%d%H%i%s'),'%H:%i:%s') as call_end_tm
                                                        ,(select dept_id from nx_emp n where n.emp_id = a.emp_id) as dept_id
                                                        ,dept_getNm((select dept_id from nx_emp n where n.emp_id = a.emp_id)) as dept_nm /* 조회 파라미터 */
							,dept_getNm((select pre_dept_id from nx_dept n where n.dept_id = a.dept_id)) as pre_dept_nm /* 조회 결과는 this + dept_nm */
							,a.duration  /*  통화시간초  */  
							,a.direction   /*  통화방향  */  
							,a.file_path   /*  파일경로  */  
							,a.negative_use_yn   /*  부정어 사용여부  */  
							,a.prohibit_use_yn  /*  금지어 사용여부*/  
							,a.ai_yn  /*  AI 평가여부*/  
							,a.ai_score  /*  AI 평가점수  */  
							,a.hum_yn  /*  수동평가여부  */  
							,a.hum_score  /*  수동평가점수  */  
							,a.qa_emp_id  /*  QA평가자 ID  */  
							,a.summary  /*  요약  */  
							,a.case_id
							,a.case_number
							,a.customer_number
				 	                , group_concat(b.talk_content ORDER BY b.talk_num ASC SEPARATOR ' ') as talk_content 
							, NVL(c.cnt, 0) as negative_count
                                                        , NVL(d.cnt, 0) as prohibit_count	
					FROM ua_call a 
					 LEFT OUTER JOIN ua_talk b 
					  ON a.start_time = b.start_time 
					  AND a.extension = b.extension
					 LEFT OUTER JOIN (SELECT start_time
								, extension
								, COUNT(1) AS cnt
								 FROM ua_bad_word 
								 WHERE negative_use_yn = 'Y' 
								 group by start_time, extension) c
                                          ON a.start_time = c.start_time
                                          AND a.extension = c.extension
                                          LEFT OUTER JOIN ( SELECT start_time
							 	, extension
							 	, COUNT(1) AS cnt
								 FROM ua_bad_word 
		 							 WHERE prohibit_use_yn = 'Y' 
									 group by start_time, extension) d
                                          ON a.start_time = d.start_time
                                          AND a.extension = d.extension
					 WHERE a.call_stat_cd = 'OFF'
                                           AND ( a.mod_dtm >= :sql_last_value OR a.reg_dtm >= :sql_last_value) 
					   GROUP BY a.call_num
					  ORDER BY a.call_num"
        }
}

filter {
  ruby {
    code => "event.set('year_month', event.get('call_id')[0..5])"	
  }
}

output {
    elasticsearch {
      index => "ua_call_%{year_month}"
      # index => "ua_call_201911"
      # document_type => "employee"
      hosts => ["localhost:9200"]
      action => "update"
      doc_as_upsert => true 
      #upsert => {
      document_id => "%{call_num}" 
      #}		
    }
}
